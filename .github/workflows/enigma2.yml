name: Enigma2 Build

on:
  push:
    branches: [ master, python-3.12 ]
  pull_request:
    branches: [ master, python-3.12 ]

jobs:
  build:
    name: Build Enigma2
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        gcc: [13]
        python: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get -q update
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt remove -y libunwind-14-dev
          sudo apt-get install g++-${{ matrix.gcc }} linux-libc-dev git build-essential automake libtool python${{ matrix.python }}-dev zlib1g-dev gettext swig libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libfreetype6-dev libsigc++-2.0-dev libfribidi-dev libavahi-client-dev libjpeg-turbo8-dev libgif-dev libcurl4-openssl-dev

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Python dependencies
        run: |
          pip3 install -r requirements.txt

      - name: Build Enigma2 dependencies, gcc-${{ matrix.gcc }}
        id: depends
        continue-on-error: true
        env:
          CC: "gcc-${{ matrix.gcc }}"
          CXX: "g++-${{ matrix.gcc }}"
        run: |
          echo "Installing libdvbsi++"
          pushd .
          cd /tmp
          git clone --depth 1 https://github.com/oe-alliance/libdvbsi.git
          cd libdvbsi
          autoreconf -i
          ./configure
          make
          sudo make install
          popd

          echo "Installing tuxbox"
          pushd .
          cd /tmp
          git clone --depth 1 https://github.com/oe-alliance/tuxtxt.git
          cd tuxtxt/libtuxtxt
          autoreconf -i
          ./configure --with-boxtype=generic DVB_API_VERSION=5
          make
          sudo make install
          cd ../tuxtxt
          autoreconf -i
          ./configure --with-boxtype=generic DVB_API_VERSION=5
          make
          sudo make install
          popd

      - name: Check on failures
        if: steps.depends.outcome != 'success'
        run: |
          cat /tmp/libdvbsi/config.log
          exit 1

      - name: Build Enigma2
        env:
          CC: "gcc-${{ matrix.gcc }}"
          CXX: "g++-${{ matrix.gcc }}"
        run: |
          set -e  # Fail fast on error
          echo "Compiling Enigma2"
          autoreconf -i
          ./configure --with-libsdl=no --with-boxtype=nobox --enable-dependency-tracking ac_cv_prog_c_openmp=-fopenmp --with-gstversion=1.0 --with-textlcd
          make -j$(nproc)  # Parallel build using all available cores
          python -m compileall .
          echo "Build completed successfully!"

      - name: Clean up build artifacts
        run: |
          sudo rm -rf /tmp/*

      - name: Create a new tag (optional)
        if: github.ref == 'refs/heads/master'
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Notify failure to Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Build failed for Enigma2 on ${GITHUB_REF}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
